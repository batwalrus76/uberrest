var uuid = require('node-uuid');
module.exports = lockMethod;


function Position(argumentNum,depth){
	this.argNum = argumentNum;
	this.depth = depth;
}

var position = Position.prototype;

position.findName = function(args){

	if(!this.depth){
		return args[this.argNum];
	}else{
		var o = args[this.argNum];
		for(var k in this.depth){
			o = o[this.depth[k]]	
		}
		return o.toString();
	}
}

function lockMethod(){


	var _reqs = [];	
	var _reqss = {};
	var fun;
	var funID = uuid.v4();
	var key = null;
	
	if(arguments.length == 2){
		key = arguments[0];		
		fun = arguments[1];		
	}else{
		fun = arguments[0];		
	}	

	function _fun(){

		var vv = false;
		
		if(arguments[0] && arguments[0].aggreType === 'ShopCart' && arguments[0].name === 'checkout'){
			vv = true;
		}
		
		if(!this.__reqs__){this.__reqs__ = []}
		if(!this.__reqss__){this.__reqss__ = {}}

		if(key !== null){
			if(!_reqss[key.findName(arguments)]){_reqss[key.findName(arguments)] = []}
			if(!this.__reqss__[funID+key.findName(arguments)]){this.__reqss__[funID+key.findName(arguments)] = []}
			var reqs = this === global ? _reqss[key.findName(arguments)] : this.__reqss__[funID+key.findName(arguments)];
		}else{
			var reqs = this === global ? _reqs : this.__reqs__;
		}

		var as = Array.apply(this,arguments)

		var self = this;

		reqs.push(as);

		if(reqs.length === 1) go();

		function go(){
	
			var req = reqs.shift();
			
			var callback = req.pop();
	
			function cb(){
				var ars =  arguments;
				setTimeout(function(){
					callback.apply(null,ars);	
				},20)
				
				if(reqs.length > 0){
					go();
				}
				
			}

			req.push(cb);
			fun.apply(self,req);

		}
	}
	return _fun;
}

lockMethod.Position = Position;

